from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

TOKEN = "7958295913:AAF_VcDTIXHYDmoRhtDdfpZwpxPAJ9A3L-I"
ADMIN_ID = 1250481865

TARIFFS = {
    '1_day': {'name': '1 –¥–µ–Ω—å', 'price': 49},
    '7_days': {'name': '7 –¥–Ω–µ–π', 'price': 149},
    '14_days': {'name': '14 –¥–Ω–µ–π', 'price': 299},
    '30_days': {'name': '30 –¥–Ω–µ–π', 'price': 499},
    'forever': {'name': '–ù–∞–≤—Å–µ–≥–¥–∞', 'price': 999}
}

pending_requests = {}
waiting_for_key = {}
user_keys = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ kasper shop</b>!\n\n"
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
    )
    keyboard = [
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='select_tariff')],
        [InlineKeyboardButton("üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data='my_keys')],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/ksssdd12312")]
    ]

    if update.message:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É
        await update.message.reply_animation(
            animation='https://i.imgur.com/Yks1Ve7.gif'
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(
            welcome_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            welcome_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

async def select_tariff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton(f"1 –¥–µ–Ω—å ‚Äî {TARIFFS['1_day']['price']} ‚ÇΩ", callback_data='tariff_1_day')],
        [InlineKeyboardButton(f"7 –¥–Ω–µ–π ‚Äî {TARIFFS['7_days']['price']} ‚ÇΩ", callback_data='tariff_7_days')],
        [InlineKeyboardButton(f"14 –¥–Ω–µ–π ‚Äî {TARIFFS['14_days']['price']} ‚ÇΩ", callback_data='tariff_14_days')],
        [InlineKeyboardButton(f"30 –¥–Ω–µ–π ‚Äî {TARIFFS['30_days']['price']} ‚ÇΩ", callback_data='tariff_30_days')],
        [InlineKeyboardButton(f"–ù–∞–≤—Å–µ–≥–¥–∞ ‚Äî {TARIFFS['forever']['price']} ‚ÇΩ", callback_data='tariff_forever')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]
    ]
    await query.edit_message_text("üìã **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:**", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def process_tariff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tariff_key = query.data.replace('tariff_', '')
    if tariff_key not in TARIFFS:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return
    context.user_data['tariff'] = tariff_key
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f'pay_{tariff_key}')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='select_tariff')]
    ]
    text = (
        f"üíº **–¢–∞—Ä–∏—Ñ:** {TARIFFS[tariff_key]['name']}\n"
        f"üí∞ **–¶–µ–Ω–∞:** {TARIFFS[tariff_key]['price']} ‚ÇΩ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ **¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª** –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤."
    )
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tariff_key = query.data.replace('pay_', '')
    if tariff_key not in TARIFFS:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return
    text = (
        f"üíº **–¢–∞—Ä–∏—Ñ:** {TARIFFS[tariff_key]['name']}\n"
        f"üíµ **–°—É–º–º–∞:** {TARIFFS[tariff_key]['price']} ‚ÇΩ\n\n"
        "üè¶ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
        "üí≥ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: `2200701041421857`\n\n"
        "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å **HWID** –≤ –ø–æ–¥–ø–∏—Å–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
    )
    await query.edit_message_text(text, parse_mode='Markdown')

async def handle_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        caption = update.message.caption
        if not caption:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å **HWID** –≤ –ø–æ–¥–ø–∏—Å–∏.", parse_mode='Markdown')
            return
        user_id = update.effective_user.id
        username = update.effective_user.username or "N/A"
        tariff = context.user_data.get('tariff', 'N/A')
        hwid = caption.strip()
        file_id = update.message.photo[-1].file_id

        pending_requests[user_id] = {'hwid': hwid, 'file_id': file_id, 'username': username, 'tariff': tariff}

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{user_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
            ]
        ])

        await context.bot.send_photo(
            chat_id=ADMIN_ID,
            photo=file_id,
            caption=(
                f"üì© –ù–æ–≤—ã–π —á–µ–∫ –æ—Ç @{username} (ID: {user_id})\n"
                f"üíº –¢–∞—Ä–∏—Ñ: {tariff}\n"
                f"üîë HWID: {hwid}"
            ),
            reply_markup=keyboard
        )
        await update.message.reply_text("‚úÖ –ß–µ–∫ –∏ HWID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å **HWID** –≤ –ø–æ–¥–ø–∏—Å–∏.", parse_mode='Markdown')

async def approve_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    admin_id = query.from_user.id
    user_id = int(query.data.split('_')[1])
    if user_id not in pending_requests:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return
    waiting_for_key[admin_id] = user_id
    await context.bot.send_message(chat_id=admin_id, text=f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}:")

async def reject_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split('_')[1])
    if user_id in pending_requests:
        del pending_requests[user_id]
    await context.bot.send_message(chat_id=user_id, text="‚ùå –í–∞—à —á–µ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.")
    await query.edit_message_text("‚ùå –ß–µ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

async def handle_key_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = update.effective_user.id
    if admin_id not in waiting_for_key:
        return
    user_id = waiting_for_key[admin_id]
    key = update.message.text.strip()
    if user_id not in pending_requests:
        await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        waiting_for_key.pop(admin_id)
        return
    req = pending_requests.pop(user_id)
    user_keys.setdefault(user_id, []).append(key)
    await context.bot.send_message(
        chat_id=user_id,
        text=(
            "‚úÖ –í–∞—à —á–µ–∫ –æ–¥–æ–±—Ä–µ–Ω!\n\n"
            f"üîë **–í–∞—à –∫–ª—é—á:**\n`{key}`\n\n"
            f"üîê HWID: {req['hwid']}"
        ),
        parse_mode='Markdown'
    )
    await update.message.reply_text(f"‚úÖ –ö–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {user_id}.")
    waiting_for_key.pop(admin_id)

async def my_keys(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    keys = user_keys.get(user_id)
    if not keys:
        await query.edit_message_text("üîë –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–ª—é—á–µ–π.")
        return
    text = "üîë **–í–∞—à–∏ –∫–ª—é—á–∏:**\n" + "\n".join(f"{i+1}. `{k}`" for i, k in enumerate(keys))
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]])
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start(update, context)

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    app.add_handler(CallbackQueryHandler(select_tariff, pattern='^select_tariff$'))
    app.add_handler(CallbackQueryHandler(process_tariff, pattern='^tariff_'))
    app.add_handler(CallbackQueryHandler(process_payment, pattern='^pay_'))
    app.add_handler(CallbackQueryHandler(back_to_start, pattern='^back_to_start$'))
    app.add_handler(CallbackQueryHandler(approve_payment, pattern=r'^approve_\d+$'))
    app.add_handler(CallbackQueryHandler(reject_payment, pattern=r'^reject_\d+$'))
    app.add_handler(CallbackQueryHandler(my_keys, pattern='^my_keys$'))

    app.add_handler(MessageHandler(filters.PHOTO, handle_receipt))
    app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_ID), handle_key_input))

    app.run_polling()

if __name__ == '__main__':
    main()
